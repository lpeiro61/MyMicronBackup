# #############################
# ##### PRINT START MACRO #####
# #############################
# *** THINGS TO UNCOMMENT: ***
# Bed mesh (2 lines at 2 locations)
# Z_TILT_ADJUST if your printer is a Trident
# Quad gantry level if your printer is a V2
# Nevermore - if you have one

[gcode_macro PRINT_START]
description: Configs and runtines before starting printing.
variable_filament_type: ''          # Set global variable named 'filament_type'
gcode:
  # Gets x and y boundaries.  
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and filamant type of your printer.
  {% set target_bed = params.BED_TEMP|int %}
  {% set target_hotend = params.HOTEND_TEMP|int %}
 
  # Sets the local variable 'TYPE_FILAMENT' with the value got from the variable 'MATERIAL_TYPE' in gcode machine.
  {% set TYPE_FILAMENT = params.MATERIAl_TYPE|default('PLA')|string %} 
  # Sets the value of the global variable of this macro named 'filament_type' from the last local variable 'TYPE_FILAMENT'
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filament_type VALUE='{TYPE_FILAMENT}'

  SET_LED LED="hotend_led" RED=1.0 GREEN=1.0 BLUE=1.0 SYNC=0 TRANSMIT=1   # Turn on hotend leds.
  # SET_LED LED="chamber_led" RED=1.0 GREEN=1.0 BLUE=1.0 SYNC=0 TRANSMIT=1  # Turn on chamber leds - Changed to daylight sticks.

  SET_FAN_SPEED FAN=electronic_fans SPEED=0.5   # Set drivers fans and side fans.
  
  # ADISABLE_MMU         # Disable MMU.

  # Displays info.
  SET_DISPLAY_TEXT MSG="Waiting for Hotend: 140°C and Bed: {target_bed}°C"
  M109 S140                 # Heats the nozzle to 150c.
  M190 S{target_bed}        # Sets the target temp for the bed.
  
  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  #STATUS_HOMING         # Sets SB-leds to homing-mode.

  SMARTHOME               # Homing the printer if it is not homed yet.
 
  G90                   # Absolut position.

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any).

  G90
  ##  Uncomment if you have a Nevermore.
  # SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore.

  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Goes to center of the bed.
  
  # Waiting for enough chamber temperature if needed according to material
  # {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('PLA')|string %}
  #
  # {% if FILAMENT_TYPE == "ASA" or FILAMENT_TYPE == "ABS" %}
  #   SET_DISPLAY_TEXT MSG="{FILAMENT_TYPE}! Waiting until the chamber temp is {target_chamber_temp}°C"  # Displays info
  #   TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber_temp} # Waits for chamber to reach desired temp
  # {% else %}
  #   SET_DISPLAY_TEXT MSG="No need to warm up the chamber."
  # {% endif %}

  # WAITING_CHAMBER_TEMP      # Waiting for enough chamber temp for printing ABS/ASA.
   
  # # Heating nozzle to 150 degrees. This helps with getting a correct Z-home.
  # SET_DISPLAY_TEXT MSG="Hotend: 150°C"          # Displays info.
  # M109 S150                                     # Heats the nozzle to 150c  .

  #  Uncomment for V2 (Quad gantry level AKA QGL).
  SET_DISPLAY_TEXT MSG="QGL"       # Displays info.
  # STATUS_LEVELING                  # Sets SB-leds to leveling-mode.
  QUAD_GANTRY_LEVEL                # Levels the buildplate via QGL.
  # G28 Z                            # Homes Z again after QGL.

  ##  Uncomment for bed mesh (2 of 2).
  SET_DISPLAY_TEXT MSG="Bed mesh"     # Displays info.
  # STATUS_MESHING                      # Sets SB-leds to bed mesh-mode.
  BED_MESH_CALIBRATE                   # Starts bed mesh.
  CARTOGRAPHER_TOUCH                   # Calibrate z offset only with hot nozzle.

  WAITING_CHAMBER_TEMP      # Waiting for enough chamber temp for printing ABS/ASA.
  CHAMBER_TEMP_CONTROL      # Controling bed and filter fans speed.

  # Heats up the nozzle up to target via data from slicer.
  SET_DISPLAY_TEXT MSG="Hotend: {target_hotend}°C"             # Displays info.
  # STATUS_HEATING                                                # Sets SB-leds to heating-mode.
  G90
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed.
  M107                                                          # Turns off partcooling fan.
  M109 S{target_hotend}                                         # Heats the nozzle to printing temp.

  ## Two BEEPs for start printing.
  # {% for i in range(2) %}
  #   BEEP
  # {% endfor %}

  # Gets ready to print by doing a purge line and updating the SB-leds.
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info.
  # STATUS_PRINTING                                  # Sets SB-leds to printing-mode.
  # G0 X{x_wait - 60} Y5 F3000                       # Moves to starting point.
  G1 X30 Y1 F3000
  G1 Z0.4                                          # Raises Z to 0.4.
  # G91                                              # Incremental positioning .
  G92 E0                                           # Zero the extruder.
  G1 X130 E20 F1000                                # Purge line.
  G90                                              # Absolut position.

  

# ###########################
# ##### PRINT END MACRO #####
# ###########################
[gcode_macro PRINT_END]
description: Runtines forn ending printing.
gcode:
  M400                           # Wait for buffer to clear.
  G92 E0                         # Zero the extruder.
  G1 E-4.0 F3600                 # Retract filament.
  
  # Get Boundaries
  {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
  {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

  # Check end position to determine safe direction to move.
  {% if printer.toolhead.position.x < (max_x - 20) %}
      {% set x_safe = 20.0 %}
  {% else %}
      {% set x_safe = -20.0 %}
  {% endif %}

  {% if printer.toolhead.position.y < (max_y - 20) %}
      {% set y_safe = 20.0 %}
  {% else %}
      {% set y_safe = -20.0 %}
  {% endif %}
  {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - printer.toolhead.position.z %}
  {% endif %}

  G91
  G1 Z{z_safe} F3600             # Move nozzle up.
  G1 X{x_safe} Y{y_safe} F20000  # Move nozzle to remove stringing.
 
  G90                            # Absolute positioning.

  # Park nozzle at rear.
  G1 X20 F3600       
  G1 Y{max_y-25} 
  
  # DESCARREGAR_FIL

  M140 S0                        # Turn off the heated bed.
  M104 S0                        # Turn off the hotend heater.
  M107                           # turn off part fan.

  ## Three BEEPs for end printing.
  # {% for i in range(3) %}
  #  BEEP
  # {% endfor %}

  SET_PIN PIN=daylight VALUE=0  # turn off chamber daylights
  SET_LED LED="hotend_led" RED=0.0 GREEN=0.0 BLUE=0.0 SYNC=0 TRANSMIT=1   # turn off hotend leds
 
  # SET_FAN_SPEED FAN=bed_fans SPEED=0         # Turn off bed fans.
  # SET_FAN_SPEED FAN=filter_fan SPEED=0       # Turn off filter fan.

   # Disable all motors
  # M84



# ###############################################
# #####  WAITING FOR CHAMBER TEMP - ABS/ASA #####
# ###############################################
[gcode_macro WAITING_CHAMBER_TEMP]
description: Waiting for enough chamber temp for printing ABS/ASA.
gcode:
  # Gets filament type from the global variable 'filament_type' in PRINT_START macro.
  {% set FILAMENT = printer["gcode_macro PRINT_START"].filament_type %}
  # Sets chamber temp target from start printing.
  {% set target_chamber_temp = 57|int %}

  # Conditional for waiting if filament type is ABS/ASA.
  {% if FILAMENT == "ASA" or FILAMENT == "ABS" %}
    SET_DISPLAY_TEXT MSG="{FILAMENT}! Waiting until the chamber temp is {target_chamber_temp}°C"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber_temp} # Waits for chamber to reach desired temp
  {% else %}
    SET_DISPLAY_TEXT MSG="No need to warm up the chamber."
  {% endif %}



# #########################################
# #####  CHAMBER TEMP CONTROL ABS/ASA #####
# #########################################
[gcode_macro CHAMBER_TEMP_CONTROL]
description: Bed fans setting for to control chamber temp.
gcode:
  # Gets filament type from the global variable 'filament_type' in PRINT_START macro.
  {% set FILAMENT = printer["gcode_macro PRINT_START"].filament_type %}

  # Conditional for setting bed/filter fans speed according to filament type.
  {% if FILAMENT == "ASA" or FILAMENT == "ABS" %}
    UPDATE_DELAYED_GCODE ID=chamber_temp_control_scrip DURATION=60
  {% else %}
    SET_FAN_SPEED FAN=bed_fans SPEED=0.2
    SET_FAN_SPEED FAN=filter_fan SPEED=0.2
  {% endif %}

[delayed_gcode chamber_temp_control_scrip]
gcode:
  {% set chamber_temp = printer["temperature_sensor chamber"].temperature %}
  
  {% if chamber_temp <= 61 %}
    SET_DISPLAY_TEXT MSG="Chamber temp is: {chamber_temp}°C"
    SET_FAN_SPEED FAN=bed_fans SPEED=0.6
  {% elif chamber_temp >= 64 %}
    SET_DISPLAY_TEXT MSG="Chamber temp is: {chamber_temp}°C"
    SET_FAN_SPEED FAN=bed_fans SPEED=0.4
  {% else %}
    SET_DISPLAY_TEXT MSG="Chamber temp is: {chamber_temp}°C"
  {% endif %}

  UPDATE_DELAYED_GCODE ID=chamber_temp_control_scrip DURATION=60
  
  
# ######################
# #####  SMARTHOME #####
# ######################
[gcode_macro SMARTHOME]
description: Home printing if it need.
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        SET_DISPLAY_TEXT MSG="Printer is already homed!"
    {% else %}
       SET_DISPLAY_TEXT MSG="Printer needs home..."
        M84     # Disable all motors.
        G28     # Homing...
    {% endif %}


# #####################
# #####  Bed Mesh #####
# #####################
[bed_mesh]
speed: 90
horizontal_move_z: 5
mesh_min: 30, 25     # Front left.
mesh_max: 145,165    # Rear right.
zero_reference_position: 87.5,89.5    # for use with sensorless.
probe_count: 13,13   # Values should be odd, so one point is directly at bed center.
algorithm: bicubic


# ##############################
# #####  CARREGAR FILAMENT #####
# ##############################
[gcode_macro LOAD_FILAMENT]
description: Load filament.
gcode:
   M83                            # Set extruder to relative.
   G1 E80 F250                    # Load filament.
   G1 E40 F250                    # Prime nozzle with filament.
   M82                            # Set extruder to absolute.


# #################################
# #####  DESCARREGAR FILAMENT #####
# #################################
[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
   M83                            # Set extruder to relative.
   G1 E10 F100                    # Extrude a little to soften tip.
   G1 E-80 F350                   # Retract some, but not too much or it will jam.
   M82                            # Set extruder to absolute.
   

# #################################
# ############  PAUSE  ############
# #################################
[gcode_macro PAUSE]
description: Pause the actual running print.
rename_existing: PAUSE_BASE
# Change this if you need more or less extrusion.
variable_extrude: 1.0
gcode:
  ##### Read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 20.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 170.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G92 E0
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


# #################################
# #############  M600  ############
# #################################
[gcode_macro M600]
description: Pause and unload filament to change it.
gcode:
  ## Five BEEPs for changing filament.
  # {% for i in range(5) %}
  #  BEEP
  # {% endfor %}
  
  {% set X = params.X|default(150)|float %}
  {% set Y = params.Y|default(20)|float %}
  {% set Z = params.Z|default(40)|float %}
  
  SAVE_GCODE_STATE NAME=M600_state
  PAUSE
  G92 E0
  G1 E-.8 F2700
  G91
  G1 Z{Z}
  G90
  G1 X{X} Y{Y} F3000
  G91
  G92 E0                      # zero the extruder
  G1 E-95 F400
  RESTORE_GCODE_STATE NAME=M600_state


# #################################
# ########## MMU DISABLE ##########
# #################################
[gcode_macro ADISABLE_MMU]
gcode:
  mmu enable=0


# #################################
# ############## BEEP #############
# #################################
[gcode_macro BEEP]
gcode:
  G4 P200  # Wait 200ms (adjust as needed)
  SET_PIN PIN=buzzer_pin VALUE=1  # Turn buzzer on
  G4 P200  # Wait 200ms (adjust as needed)
  SET_PIN PIN=buzzer_pin VALUE=0  # Turn buzzer off
  

